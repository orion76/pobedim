/******************************************************************************/
/***         Generated by IBExpert 2018.4.22.1 15.04.2020 10:42:48          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

SET CLIENTLIB 'C:\Program Files (x86)\HK-Software\fb3client32.dll';

CREATE DATABASE '127.0.0.1/3050:c:\db\user.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8 COLLATION UTF8;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN BLOB_UTF8 AS
BLOB SUB_TYPE 1 SEGMENT SIZE 80;

CREATE DOMAIN CH1 AS
CHAR(1);

CREATE DOMAIN D AS
DATE;

CREATE DOMAIN INT1 AS
SMALLINT;

CREATE DOMAIN INT2 AS
INTEGER;

CREATE DOMAIN INT4 AS
BIGINT;

CREATE DOMAIN TS AS
TIMESTAMP;

CREATE DOMAIN VCH100 AS
VARCHAR(100);

CREATE DOMAIN VCH20 AS
VARCHAR(20);

CREATE DOMAIN VCH250 AS
VARCHAR(250);

CREATE DOMAIN VCH50 AS
VARCHAR(50);



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_U START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_U TO 4093;

CREATE GENERATOR ID_ START WITH 0 INCREMENT BY -1;
SET GENERATOR ID_ TO -2081;



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE U0_SECRET_S (
    XU INTEGER /* TYPE OF COLUMN U0_SECRET.U */)
RETURNS (
    CODE_SECRET VARCHAR(50) /* TYPE OF COLUMN U0_SECRET.CODE_SECRET */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE U0_SESSION_S (
    XU INTEGER /* TYPE OF COLUMN U0_SESSION.U */,
    XHOST VARCHAR(50) /* TYPE OF COLUMN U0_SESSION.HOST */)
RETURNS (
    TIME_SESSION TIME /* TYPE OF COLUMN U0_SESSION.TIME_SESSION */,
    PLUS_TIME_SESSION INT2,
    LASTING_SESSION INT2)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE U2_CONVERSE_CNT (
    U_CT INT2,
    U INT2)
RETURNS (
    CNT_CONVERSE_NEW INT1)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE U2_CONVERSE_I1 (
    U_FROM INTEGER /* TYPE OF COLUMN U2_CONVERSE.U */,
    U_TO INTEGER /* TYPE OF COLUMN U2_CONVERSE.U */,
    TEXT_CONVERSE VARCHAR(250) /* TYPE OF COLUMN U2_CONVERSE.TEXT_CONVERSE */)
RETURNS (
    TS TIMESTAMP /* TYPE OF COLUMN U2_CONVERSE.TS */,
    ID_CONVERSE INT2)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE U2_CONVERSE_RE (
    ID_CONVERSE INTEGER /* TYPE OF COLUMN U2_CONVERSE.ID_CONVERSE */,
    U INTEGER /* TYPE OF COLUMN U2_CONVERSE.U */,
    TEXT_CONVERSE VARCHAR(250) /* TYPE OF COLUMN U2_CONVERSE.TEXT_CONVERSE */)
RETURNS (
    R VCH100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE W0_LOGIN_NEW_S (
    XHOST VCH50,
    XNAME_U VCH50)
RETURNS (
    CNT_HOST INT2,
    U INT2,
    IS_ALLOWED INT1)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE W0_PG404_S (
    URL_FROM VARCHAR(250) /* TYPE OF COLUMN W0_PG404.URL_FROM */,
    HOST VCH50)
RETURNS (
    URL_TO VARCHAR(250) /* TYPE OF COLUMN W0_PG404.URL_TO */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE W0_USER_SX_L3 (
    XSX VCH250)
RETURNS (
    U INTEGER /* TYPE OF COLUMN W0_USER.U */,
    TS_LOGIN TS,
    NAME_U VCH250)
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE L0_USER (
    TS_LOG      TS default CURRENT_TIMESTAMP NOT NULL,
    U           INT2 NOT NULL,
    U_PARENT    INT2,
    NAME_U      VCH50,
    IP_HOST     VCH20,
    TEXT_LOGIN  BLOB_UTF8,
    TS_DELETED  TS,
    MAIL_U      VCH50,
    PW_U        VCH50
);

CREATE TABLE S0_SESSION (
    KEY_SESSION  VCH100 NOT NULL,
    U            INT2 NOT NULL,
    ID_SESSION   INT2,
    IP_REMOTE    VCH50,
    TS_SESSION   TS DEFAULT current_timestamp,
    X            CH1,
    IS_BOT       INT1
);

CREATE TABLE U0_HOST (
    U            INT2 NOT NULL,
    IP_HOST      VCH20 NOT NULL,
    TS_INSERTED  TS DEFAULT current_timestamp,
    TS_SYS       TS DEFAULT current_timestamp
);

CREATE TABLE U0_SECRET (
    U            INT2 NOT NULL,
    CODE_SECRET  VCH50 NOT NULL,
    TS_SYS       TS DEFAULT current_timestamp
);

CREATE TABLE U0_SESSION (
    U                INT2 NOT NULL,
    DATE_SESSION     DATE NOT NULL,
    TIME_SESSION     TIME,
    HOST             VCH50,
    LASTING_SESSION  INT2 DEFAULT 0
);

CREATE TABLE U0_USER (
    U        INT2 NOT NULL,
    U_USER   INT2 NOT NULL,
    TS_VIEW  TS
);

CREATE TABLE U2_CONVERSE (
    U                INT2 NOT NULL,
    ID_CONVERSE      INT2 NOT NULL,
    T_TEXT_CONVERSE  INT1 NOT NULL,
    TS               TS DEFAULT current_timestamp NOT NULL,
    TEXT_CONVERSE    VCH250
);

CREATE TABLE W0_API (
    DB      INT1,
    QUERY   VCH250,
    HOST    VCH50,
    TS_SYS  TS DEFAULT current_timestamp
);

CREATE TABLE W0_CAPTCHA (
    CAPTCHA  VCH50 NOT NULL,
    TS_SYS   TS DEFAULT current_timestamp
);

CREATE TABLE W0_HOST (
    IP_HOST        VCH20 NOT NULL,
    IS_BOT         INT1,
    CITY_HOST      VCH50,
    REGION_HOST    VCH50,
    JSON_GEO_HOST  BLOB_UTF8,
    TS_SYS         TS DEFAULT current_timestamp,
    NAME_HOST      VCH100
);

CREATE TABLE W0_LOGIN (
    TS_SYS  TS DEFAULT current_timestamp NOT NULL,
    HOST    VCH50 NOT NULL
);

CREATE TABLE W0_LOGIN_NEW (
    TS_SYS   TS DEFAULT current_timestamp NOT NULL,
    HOST     VCH50 NOT NULL,
    U        INT2,
    EMAIL_U  VCH50
);

CREATE TABLE W0_MAILERR (
    ID_           INT2 NOT NULL,
    MAIL          VCH100,
    TS_SYS        TS DEFAULT current_timestamp,
    TEXT_MAILERR  BLOB_UTF8,
    PW            VCH50
);

CREATE TABLE W0_PG404 (
    URL_FROM  VCH250 NOT NULL,
    URL_TO    VCH250,
    TS_SYS    TS DEFAULT current_timestamp,
    HOST      VCH50
);

CREATE TABLE W0_RAISE404 (
    TEXT_404  VCH100 NOT NULL
);

CREATE TABLE W0_SESSION (
    ID_SESSION  INT2 NOT NULL,
    U           INT2,
    IP_REMOTE   VCH50,
    TS_SESSION  TS DEFAULT current_timestamp,
    X           CH1
);

CREATE TABLE W0_U_LOGIN_EMAIL (
    LOGIN_EMAIL_U  VCH50 NOT NULL,
    U              INT2 NOT NULL,
    TS_SYS         TS DEFAULT current_timestamp,
    TEXT_LOGIN     BLOB_UTF8,
    X              CH1
);

CREATE TABLE W0_U_LOGIN_FB (
    LOGIN_FB_U  VCH50 NOT NULL,
    U           INT2 NOT NULL,
    TS_SYS      TS DEFAULT current_timestamp,
    TEXT_LOGIN  BLOB_UTF8
);

CREATE TABLE W0_U_LOGIN_OK (
    LOGIN_OK_U  VCH50 NOT NULL,
    U           INT2 NOT NULL,
    TS_SYS      TS DEFAULT current_timestamp,
    TEXT_LOGIN  BLOB_UTF8
);

CREATE TABLE W0_U_LOGIN_VK (
    LOGIN_VK_U  VCH50 NOT NULL,
    U           INT2 NOT NULL,
    TS_SYS      TS DEFAULT current_timestamp,
    TEXT_LOGIN  BLOB_UTF8
);

CREATE TABLE W0_USER (
    U            INT2 NOT NULL,
    U_PARENT     INT2,
    NAME_U       VCH50,
    IP_HOST      VCH20,
    TEXT_LOGIN   BLOB_UTF8,
    TS_LOGIN     TS,
    TS_SYS       TS DEFAULT current_timestamp,
    TS_DELETED   TS,
    MAIL_U       VCH50,
    PW_U         VCH50,
    TS_INSERTED  TS DEFAULT current_timestamp,
    TS_UPDATED   TS,
    X            CH1
);

CREATE TABLE W0_VECHE (
    VECHE                  INT2 NOT NULL,
    TEXT_MSG_MEMBER_VECHE  BLOB_UTF8,
    U_ADMIN                INT2
);

CREATE TABLE W2_CONVERSE (
    ID_CONVERSE  INT2 NOT NULL
);

CREATE TABLE W2_USER (
    U                  INT2 NOT NULL,
    U_PARENT           INT2,
    ID_WALL            INT2,
    IS_DELETED         INT1 DEFAULT 0,
    IS_VERIFIED_VECHE  INT1 DEFAULT 0,
    TS_SYS             TS,
    ID_CERTIFICATE_U   INT4,
    NAME_U             VCH50,
    CITY_U             VCH50,
    LIST_SPECIALITY_U  VCH100,
    BIRTHDAY_U         VCH20,
    TS_INSERTED        TS DEFAULT current_timestamp,
    TS_UPDATED         TS,
    L                  INT4,
    US                 VCH20,
    X                  CH1,
    TS_USER            TS DEFAULT current_timestamp,
    ID_SESSION_LAST    INT2
);



/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE U0_SESSION ADD CONSTRAINT CHK1_U0_SESSION CHECK (u <> 1000);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE U0_SECRET ADD CONSTRAINT UNQ1_U0_SECRET UNIQUE (CODE_SECRET);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE L0_USER ADD CONSTRAINT PK_L0_USER PRIMARY KEY (TS_LOG, U)
USING DESCENDING INDEX PK_L0_USER;
ALTER TABLE U0_HOST ADD CONSTRAINT PK_U0_HOST PRIMARY KEY (U, IP_HOST);
ALTER TABLE U0_SECRET ADD CONSTRAINT PK_U0_SECRET PRIMARY KEY (U);
ALTER TABLE U0_SESSION ADD CONSTRAINT PK_U0_SESSION PRIMARY KEY (U, DATE_SESSION);
ALTER TABLE U0_USER ADD CONSTRAINT PK_U0_USER PRIMARY KEY (U, U_USER);
ALTER TABLE W0_CAPTCHA ADD CONSTRAINT PK_W0_CAPTCHA PRIMARY KEY (CAPTCHA);
ALTER TABLE W0_HOST ADD CONSTRAINT PK_W0_HOST_1 PRIMARY KEY (IP_HOST);
ALTER TABLE W0_LOGIN ADD CONSTRAINT PK_W0_LOGIN PRIMARY KEY (TS_SYS, HOST);
ALTER TABLE W0_LOGIN_NEW ADD CONSTRAINT PK_W0_LOGIN_NEW PRIMARY KEY (HOST, TS_SYS);
ALTER TABLE W0_MAILERR ADD CONSTRAINT PK_W0_MAILERR PRIMARY KEY (ID_);
ALTER TABLE W0_PG404 ADD CONSTRAINT PK_W0_PG404 PRIMARY KEY (URL_FROM);
ALTER TABLE W0_RAISE404 ADD CONSTRAINT PK_W0_RAISE404 PRIMARY KEY (TEXT_404);
ALTER TABLE W0_USER ADD CONSTRAINT PK_W0_USER PRIMARY KEY (U);
ALTER TABLE W0_U_LOGIN_EMAIL ADD CONSTRAINT PK_W0_U_LOGIN_EMAIL PRIMARY KEY (LOGIN_EMAIL_U, U);
ALTER TABLE W0_U_LOGIN_FB ADD CONSTRAINT PK_W0_U_LOGIN_FB PRIMARY KEY (LOGIN_FB_U);
ALTER TABLE W0_U_LOGIN_OK ADD CONSTRAINT PK_W0_U_LOGIN_OK PRIMARY KEY (LOGIN_OK_U);
ALTER TABLE W0_U_LOGIN_VK ADD CONSTRAINT PK_W0_U_LOGIN_VK PRIMARY KEY (LOGIN_VK_U);
ALTER TABLE W0_VECHE ADD CONSTRAINT PK_W0_VECHE PRIMARY KEY (VECHE);
ALTER TABLE W2_CONVERSE ADD CONSTRAINT PK_W2_CONVERSE PRIMARY KEY (ID_CONVERSE);
ALTER TABLE W2_USER ADD CONSTRAINT PK_W2_USER PRIMARY KEY (U);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE U0_USER ADD CONSTRAINT FK_U0_USER_1 FOREIGN KEY (U) REFERENCES W0_USER (U) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE U0_USER ADD CONSTRAINT FK_U0_USER_2 FOREIGN KEY (U_USER) REFERENCES W0_USER (U) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE U2_CONVERSE ADD CONSTRAINT FK_U2_CONVERSE_1 FOREIGN KEY (ID_CONVERSE) REFERENCES W2_CONVERSE (ID_CONVERSE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE W0_USER ADD CONSTRAINT FK_W0_USER_1 FOREIGN KEY (IP_HOST) REFERENCES W0_HOST (IP_HOST);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX W0_USER_IDX1 ON W0_USER (MAIL_U);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: U0_SECRET_AIU0 */
CREATE TRIGGER U0_SECRET_AIU0 FOR U0_SECRET
ACTIVE AFTER INSERT OR UPDATE POSITION 0
as
begin
  delete from U0_SECRET where CURRENT_TIMESTAMP - ts_sys > 0.005;
end
^

/* Trigger: U0_SECRET_BIU0 */
CREATE TRIGGER U0_SECRET_BIU0 FOR U0_SECRET
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin
  NEW.TS_SYS = CURRENT_TIMESTAMP;
  NEW.CODE_SECRET = ''|| ROUND( RAND()*100000);
  WHILE (OCTET_LENGTH(NEW.CODE_SECRET) < 6 OR EXISTS(SELECT 1 FROM U0_SECRET WHERE CODE_SECRET = NEW.CODE_SECRET) )
      DO NEW.CODE_SECRET = NEW.CODE_SECRET || ROUND( RAND()*10 );
end
^

/* Trigger: U0_SESSION_BIU0 */
CREATE TRIGGER U0_SESSION_BIU0 FOR U0_SESSION
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin
  new.TIME_SESSION = CURRENT_TIME;
end
^

/* Trigger: U2_CONVERSE_AD */
CREATE TRIGGER U2_CONVERSE_AD FOR U2_CONVERSE
ACTIVE AFTER DELETE POSITION 0
as
begin
  delete from w2_converse where id_converse = old.ID_CONVERSE;
end
^

/* Trigger: W0_CAPTCHA_AI0 */
CREATE TRIGGER W0_CAPTCHA_AI0 FOR W0_CAPTCHA
ACTIVE AFTER INSERT POSITION 0
as
begin
  delete from W0_CAPTCHA where CURRENT_TIMESTAMP - ts_sys > 0.005;
end
^

/* Trigger: W0_LOGIN_NEW_BI */
CREATE TRIGGER W0_LOGIN_NEW_BI FOR W0_LOGIN_NEW
ACTIVE BEFORE INSERT POSITION 0
as
begin
  new.EMAIL_U = trim(new.EMAIL_U);
end
^

/* Trigger: W0_MAILERR_BI */
CREATE TRIGGER W0_MAILERR_BI FOR W0_MAILERR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  NEW.ID_ = NEXT VALUE FOR ID_;
END
^

/* Trigger: W0_USER_AIU2 */
CREATE TRIGGER W0_USER_AIU2 FOR W0_USER
ACTIVE AFTER INSERT OR UPDATE POSITION 2
as
BEGIN
  IF (NEW.IP_HOST IS NOT NULL and NEW.U > 1000) THEN
      UPDATE OR INSERT INTO U0_HOST(IP_HOST, U, TS_SYS) VALUES (NEW.IP_HOST,NEW.U, CURRENT_TIMESTAMP);
END
^

/* Trigger: W0_USER_AU */
CREATE TRIGGER W0_USER_AU FOR W0_USER
ACTIVE AFTER UPDATE POSITION 0
AS
BEGIN

  IF (OLD.MAIL_U IS NOT NULL AND
      NEW.MAIL_U IS NOT NULL AND
      NEW.MAIL_U <> OLD.MAIL_U) THEN
  BEGIN
     UPDATE W0_USER SET MAIL_U = NEW.MAIL_U, PW_U=NEW.PW_U
        WHERE MAIL_U = OLD.MAIL_U AND
              U <> NEW.U AND
              MAIL_U IS NOT NULL;
  END

END
^

/* Trigger: W0_USER_AU9 */
CREATE TRIGGER W0_USER_AU9 FOR W0_USER
ACTIVE AFTER UPDATE POSITION 9
AS
BEGIN
  if (not EXISTS(select 1
            from L0_USER
            where U = old.U and
                  name_u is not distinct from old.NAME_U and
                  text_login is not distinct from old.text_login and
                  mail_u is not distinct from old.MAIL_U
    )) then
    INSERT INTO L0_USER (U, U_PARENT, NAME_U, IP_HOST, TEXT_LOGIN, TS_DELETED, MAIL_U, PW_U)
            VALUES (OLD.U, OLD.U_PARENT, OLD.NAME_U, OLD.IP_HOST, OLD.TEXT_LOGIN, OLD.TS_DELETED, OLD.MAIL_U, OLD.PW_U);
END
^

/* Trigger: W0_USER_BIU0 */
CREATE TRIGGER W0_USER_BIU0 FOR W0_USER
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN
  new.MAIL_U = LOWER(trim(new.MAIL_U)); if ( new.MAIL_U = '') then new.MAIL_U = null;

  IF (NEW.U IS NULL) THEN
  BEGIN
    NEW.U = NEXT VALUE FOR GEN_U;
    WHILE (EXISTS(SELECT 1 FROM W0_USER WHERE U = NEW.U)) DO NEW.U = NEXT VALUE FOR GEN_U;
  END

  if (COALESCE(trim(new.NAME_U),'')='') then new.NAME_U = 'user'||new.U;

  if (new.IP_HOST is not null) then
  begin
    if (not exists(select 1 from w0_host where ip_host=new.IP_HOST)) then
       insert into w0_host (ip_host, is_bot) VALUES (new.IP_HOST, 0);
  end

END
^

/* Trigger: W0_U_LOGIN_EMAIL_BI */
CREATE TRIGGER W0_U_LOGIN_EMAIL_BI FOR W0_U_LOGIN_EMAIL
ACTIVE BEFORE INSERT POSITION 0
as
begin
   new.LOGIN_EMAIL_U = lower ( trim( new.LOGIN_EMAIL_U ) );
end
^

/* Trigger: W2_CONVERSE_AD */
CREATE TRIGGER W2_CONVERSE_AD FOR W2_CONVERSE
ACTIVE AFTER DELETE POSITION 0
as
begin
  delete from w2_converse where id_converse = old.ID_CONVERSE;
end
^

/* Trigger: W2_CONVERSE_BI */
CREATE TRIGGER W2_CONVERSE_BI FOR W2_CONVERSE
ACTIVE BEFORE INSERT POSITION 0
as
begin
new.ID_CONVERSE = next value for id_;
end
^
SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE U0_SECRET_S (
    XU TYPE OF COLUMN U0_SECRET.U)
RETURNS (
    CODE_SECRET TYPE OF COLUMN U0_SECRET.CODE_SECRET)
AS
BEGIN
  UPDATE OR INSERT INTO U0_SECRET(U, TS_SYS)
    VALUES (:XU, NULL)
    RETURNING CODE_SECRET INTO :CODE_SECRET;

    SUSPEND;
END^


ALTER PROCEDURE U0_SESSION_S (
    XU TYPE OF COLUMN U0_SESSION.U,
    XHOST TYPE OF COLUMN U0_SESSION.HOST)
RETURNS (
    TIME_SESSION TYPE OF COLUMN U0_SESSION.TIME_SESSION,
    PLUS_TIME_SESSION INT2,
    LASTING_SESSION INT2)
AS
BEGIN
   if (xu = 1000) then EXIT;

   TIME_SESSION = null;   lasting_session = 0;

   SELECT TIME_SESSION , COALESCE( current_time - TIME_SESSION ,0) , COALESCE( lasting_session,0)
      FROM U0_SESSION us
      where us.u = :xu and
            us.DATE_SESSION = current_date
      INTO :TIME_SESSION, :plus_time_session ,:lasting_session;


  IF (LASTING_SESSION =0 OR PLUS_TIME_SESSION > 20 ) THEN
  BEGIN
    UPDATE OR INSERT INTO U0_SESSION (U,DATE_SESSION,TIME_SESSION,HOST, LASTING_SESSION)
             VALUES (:XU,CURRENT_DATE,CURRENT_TIME,:XHOST, :LASTING_SESSION + :PLUS_TIME_SESSION);
  END

  SUSPEND;
END^


ALTER PROCEDURE U2_CONVERSE_CNT (
    U_CT INT2,
    U INT2)
RETURNS (
    CNT_CONVERSE_NEW INT1)
AS
begin
  SELECT count(1)
     from U2_CONVERSE cs
       inner join U2_CONVERSE cs1 on cs1.ID_CONVERSE = cs.ID_CONVERSE and
                                     cs1.U = :U_CT and
                                     cs1.T_TEXT_CONVERSE = 1
     where cs.U = :U and
           cs.T_TEXT_CONVERSE <> 1
     into :CNT_CONVERSE_NEW;
  SUSPEND;
END^


ALTER PROCEDURE U2_CONVERSE_I1 (
    U_FROM TYPE OF COLUMN U2_CONVERSE.U,
    U_TO TYPE OF COLUMN U2_CONVERSE.U,
    TEXT_CONVERSE TYPE OF COLUMN U2_CONVERSE.TEXT_CONVERSE)
RETURNS (
    TS TYPE OF COLUMN U2_CONVERSE.TS,
    ID_CONVERSE INT2)
AS
BEGIN
  insert into w2_converse (id_converse) values (null)
     returning id_converse into :id_converse;

  INSERT INTO U2_CONVERSE (  id_converse,
    U,
    T_TEXT_CONVERSE,
    TEXT_CONVERSE)
  VALUES (  :id_converse,
    :U_from,
     2,
    :TEXT_CONVERSE)
    returning ts into :ts;


  INSERT INTO U2_CONVERSE ( id_converse,
    U,
    T_TEXT_CONVERSE,
    TEXT_CONVERSE,
    ts)
  VALUES (  :id_converse,
    :U_to,
     1,
    '',
    :ts);

  suspend;
END^


ALTER PROCEDURE U2_CONVERSE_RE (
    ID_CONVERSE TYPE OF COLUMN U2_CONVERSE.ID_CONVERSE,
    U TYPE OF COLUMN U2_CONVERSE.U,
    TEXT_CONVERSE TYPE OF COLUMN U2_CONVERSE.TEXT_CONVERSE)
RETURNS (
    R VCH100)
AS
BEGIN
  UPDATE U2_CONVERSE
  SET TS = CURRENT_TIMESTAMP,
      TEXT_CONVERSE = :TEXT_CONVERSE 
  WHERE (U = :U) AND
        (ID_CONVERSE = :ID_CONVERSE) AND
        T_TEXT_CONVERSE  in ( 1, 2);

  SUSPEND;
END^


ALTER PROCEDURE W0_LOGIN_NEW_S (
    XHOST VCH50,
    XNAME_U VCH50)
RETURNS (
    CNT_HOST INT2,
    U INT2,
    IS_ALLOWED INT1)
AS
BEGIN
  SELECT count(1)
      FROM W0_LOGIN_NEW
      where host = :xhost  and :XHOST <> '::1' and
            CURRENT_TIMESTAMP - ts_sys < 0.05
      INTO :cnt_host;

  IF (CNT_HOST > 4) THEN IS_ALLOWED = 0;
  ELSE
  BEGIN
      IS_ALLOWED = 1;
      INSERT INTO W0_USER(NAME_U) VALUES (:XNAME_U) RETURNING U INTO :U;
  END

  SUSPEND;
END^


ALTER PROCEDURE W0_PG404_S (
    URL_FROM TYPE OF COLUMN W0_PG404.URL_FROM,
    HOST VCH50)
RETURNS (
    URL_TO TYPE OF COLUMN W0_PG404.URL_TO)
AS
BEGIN

  if (exists(SELECT 1 FROM W0_RAISE404 where :URL_FROM CONTAINING text_404 )) then
  begin
     URL_TO = '404';
  end else
  begin
      SELECT URL_TO
          FROM W0_PG404
          WHERE URL_FROM = :URL_FROM
          INTO :URL_TO;
    
      IF (ROW_COUNT = 0) THEN
         INSERT INTO W0_PG404 (URL_FROM, URL_TO, host) VALUES (:URL_FROM, '/',:HOST) RETURNING URL_TO INTO :URL_TO;
   end
   SUSPEND;
END^


ALTER PROCEDURE W0_USER_SX_L3 (
    XSX VCH250)
RETURNS (
    U TYPE OF COLUMN W0_USER.U,
    TS_LOGIN TS,
    NAME_U VCH250)
AS
BEGIN
  XSX = COALESCE( LOWER( TRIM( XSX) ) ,'%');
  IF (POSITION('%',XSX) = 0) THEN XSX='%'||XSX||'%';

  FOR SELECT U.U,
             U.NAME_U,
             u.TS_LOGIN
      FROM W0_USER  U
      WHERE
        u.u > 1000 AND 
        U.TS_DELETED IS NULL AND
        U.U_PARENT IS NULL AND
        LOWER( U.NAME_U ) LIKE :XSX
      INTO :U,
           :NAME_U,
           :TS_LOGIN
  DO
  BEGIN
    SUSPEND;
  END
END^



SET TERM ; ^

